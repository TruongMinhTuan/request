pm2 deploy ecosystem.config.js production setup
npm install -g npm-check-updates
pm2 unstartup upstart
sudo wget -O - https://raw.githubusercontent.com/audstanley/NodeJs-Raspberry-Pi/master/Install-Node.sh | bash;
ln -s /usr/bin/nodejs /usr/bin/node
  sudo apt-get install systemd systemd-sysv

/**
*
* RecipeDetails
*
*/

import React from 'react';
import Helmet from 'react-helmet';
import classnames from 'classnames/bind';
import { FormattedMessage } from 'react-intl';
import { IconCartHappy } from 'components/Icons';

import {
  DebugHelper,
  Container,
  Row,
  Col,
  CoverPhoto,
  Input,
  Button,
} from 'components/Basement';
import EntityAuthor from 'components/EntityAuthor';
import EntityDescription from 'components/EntityDescription';
import Permalink from 'components/Permalink';
import Fblike from 'components/Fblike';

import messages from './messages';
import styles from './styles.styl';
let tepm = true;
let temp2 = '';
let a = 9;
const cx = classnames.bind(styles);

const debug = new DebugHelper('components/RecipeDetails');
class Ingredient extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      isChecked: true,
      testchecked: 0
    };
  }
  toggleChange = () => {
    this.setState({
      isChecked: !this.state.isChecked,
    });
    if (this.state.isChecked)
      console.log("checked")
    else
      console.log("chua check")

  }
  state = {
    disabled: false,
  };
  render() {

    debug('render');

    function toggleCheckbox(productId, quantity) {
      if (productId) {
        //
        console.log("befor " + productsToAdd.length)
        let indexOfProduct = -1;
        productsToAdd.forEach((product, index) => {
          // console.log("productId =" + productId + "product.productId=" + product.productId + "\n")
          if (product.productId === productId) {
            indexOfProduct = index;
          }
        });
        if (indexOfProduct === -1) {
          productsToAdd.push({ productId, quantity });
          //  this.setState({testchecked: 1 });
        } else {
          productsToAdd.splice(indexOfProduct, 1);
          //  this.setState({testchecked:2});
        }
      } console.log("after " + productsToAdd.length)
    }

    function onChange(e) {
      console.log('Checkbox checked:', (e.target.checked));

      if (productId) {
        //
        console.log("befor " + productsToAdd.length)
        let indexOfProduct = -1;
        productsToAdd.forEach((product, index) => {
          // console.log("productId =" + productId + "product.productId=" + product.productId + "\n")
          if (product.productId === productId) {
            indexOfProduct = index;
          }
        });
        if (indexOfProduct === -1) {
          productsToAdd.push({ productId, quantity });
        }
        else

          productsToAdd.splice(indexOfProduct, 1);

      } console.log("after " + productsToAdd.length)
    }

    const { ingredient, locale, productsToAdd, cart, thisistest } = this.props;
    const { isChecked } = this.state;
    const {
      displayQuantity,
      text,
      text_vn: textVn,
      product = {},
      quantity,
    } = ingredient;

    const {
      id: productId,
      name: productName,
    } = product;

    const ingredientName = locale === 'vi'
      ? (textVn || text)
      : text;
    const thumbnail = product['thumbnail@2x'];
    const thumbnailUrl = thumbnail && thumbnail[0] && thumbnail[0].url;


    // if (tepm) {

    //   productsToAdd.push({ productId, quantity })
    //   console.log("da them ----------------------------------")
    //   temp2 = 's'
    // }

    // else {



    //      productsToAdd.length = 0
    //   console.log("------------------------------------da xoa"+a)
    //   temp2 = ''

    //   }



    // if ( productId && !cart.has(productId)) {
    //   productsToAdd.push({ productId, quantity })
    //   console.log("da them -----------do null all-----------------------")
    //   temp2 = 's'
    // }

    console.log("=============================" + thisistest + '========' + productsToAdd.length)
    if (thisistest == -1 && productId && !cart.has(productId))

      productsToAdd.push({ productId, quantity })

    //toggleCheckbox(productId, quantity)
    if (productId && cart.has(productId))
      a++

    //  if (productId) {
    //   //
    //   console.log("cart click befor ///////" + productsToAdd.length)
    //   let indexOfProduct = -1;
    //   thisistest.forEach((product, index) => {
    //    // console.log("productId =" + productId + "product.productId=" + product.productId + "\n")
    //     if (product.productId === productId) {
    //       indexOfProduct = index;
    //     }
    //   });
    //   if (indexOfProduct === -1 ) {
    //     productsToAdd.push({ productId, quantity });
    //   } 
    //    else

    //     productsToAdd.splice(indexOfProduct, 1);
    //     console.log("cart click after\\\\\\\\\\\ " + productsToAdd.length)
    //         }
    return (
      <tr className={styles.ingredientsItem}>
        <td>
          {productId && cart.has(productId) &&
            <span className={styles.ingredientStatus}>
              <IconCartHappy height={20} width={20} />
            </span>
          }

          {productId && !cart.has(productId) &&
            <Input
              name={productId}
              type="checkbox"
              className="inline"
              //checked={isChecked } //|| productId && !cart.has(productId)}
              onChange={() => toggleCheckbox(productId, quantity)}
              // disabled={this.state.disabled}
              //  onClick={onCha9nge}
              //  onClick={incrementCounter}
              defaultChecked
            //  checked={input.value.indexOf(option.name) !== -1}
            // onChange={(event) => {

            //  if (event.target.checked) {
            //     console.log("checked ")
            //     this.setState({testchecked: this.state.testchecked++});
            //     console.log(this.state.testchecked)
            //  } else {
            //      console.log("not check")
            //     // this.setState({testchecked: this.state.testchecked-- });
            //      console.log(this.state.testchecked)

            //  }


            //}
            //  }
            />
          }

        </td>
        <td className={styles.ingredientQuantity}>
          {displayQuantity || '+'}
        </td>
        <td
          className={styles.ingredientName}
          colSpan={!productId ? '2' : '1'}
        >
          {ingredientName}
        </td>
        {productId && (
          <td>
            <Permalink
              deeplink={`product::${productId}`}
              name={name}
              className={styles.ingredientProduct}
            >
              {thumbnailUrl &&
                <CoverPhoto
                  height={146}
                  src={thumbnailUrl}
                  alt={productName}
                  ratio="3_2"
                />
              }
            </Permalink>
          </td>
        )}
      </tr>
    );
  }
}

class RecipeDetails extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: -1

    }

  }

  render() {
    debug('render');
    const classes = cx({
      recipeDetails: true,
    });
    const {
        name,
      description = '',
      images,
      author,
      ingredients,
      preparations,
      locale,
      // serve,
      addProductsToCart,
      productsToAdd,
      cart, product
      } = this.props;
    const photoUrl = images && images[0] && images[0].url;
    const { isChecked, thisistest, testchecked } = this.state;
    debug('ingredientName', ingredients);

    const metaTitle = `${name}`;
    let metaKeywords = ingredients
      .map(ingredient => `${ingredient.text},${ingredient.text_vn}`);

    metaKeywords.push('công th?c n?u an');
    metaKeywords.push('cooking');
    metaKeywords.push('recipe');
    metaKeywords = metaKeywords.join(',');

    const metaDescription = `Công Th?c N?u An (Recipe): ${name} (${author}) - ${description}`;
    console.log("dsa")
    temp2 = ''
    a = productsToAdd.length;
    let dem=0;
    for (const checkbox of ingredients) {
      cart.has(checkbox.product.id) ? dem++ : console.log("dont check");     
    }  
    dem==ingredients.length?console.log(""):console.log("hien") 
    console.log(">>>>>>>>>>>>>>>>>" + this.state.testchecked)
    return (<div className={classes}>

      <Helmet title={metaTitle}>
        <meta name="description" content={metaDescription} />
        <meta name="keywords" content={metaKeywords} />
        <meta name="og:title" content={`chopp.vn | ${metaTitle}`} />
        <meta name="og:description" content={metaDescription} />
        {photoUrl &&
          <meta name="og:image" content={photoUrl} />
        }
      </Helmet>

      <Container centered>
        <Row>
          <Col desktop={12}>
            <h4 className={styles.heading}>{name}</h4>
          </Col>
        </Row>

        <Row className={styles.socialActions}>
          <Col desktop={12}>
            <Fblike />
          </Col>
        </Row>

        <Row className={styles.introduction}>
          <Col
            desktop={4}
            tablet={6}
            mobile={12}
            className={styles.preface}
          >
            {
              author && <EntityAuthor text={`—${author}`} />
            }
            {
              description && (
                <EntityDescription>
                  <br />
                  {description}
                </EntityDescription>
              )
            }
          </Col>

          {photoUrl && (
            <Col
              desktop={6}
              tablet={6}
              mobile={12}
            >
              <CoverPhoto
                src={photoUrl}
                alt={name}
                className={styles.photo}
                ratio="3_2"
              />
            </Col>
          )}
        </Row>

        <Row className={styles.details}>
          <Col
            desktop={4}
            tablet={12}
            mobile={12}
            className={styles.ingredients}
          >
            {ingredients.length && (
              <div className={styles.headerWrapper}>
                <h5 className={styles.subHeading}>
                  <FormattedMessage {...messages.ingredientHeading} />
                </h5>

                <Button
                  cast='success'
                  className={styles.addAllToCartButton}
                  size='small'
                  onClick={() => {
                

                    this.setState({ name: productsToAdd.length }); console.log("test ------- " + product); tepm = false; addProductsToCart(productsToAdd); productsToAdd.length = 0;
                  }}
                   disabled={dem==ingredients.length?"d ":"" }     
                  abc={this.state.testchecked}
                >
                  <FormattedMessage {...messages.addToCart} />
                </Button>
              </div>
            )}
            <table className={styles.ingredientsList}>
              <tbody>
                {ingredients
                  .map((ingredient, i) => (
                    <Ingredient
                      ingredient={ingredient}
                      key={i}
                      locale={locale}
                      productsToAdd={productsToAdd}
                      cart={cart}
                      thisistest={this.state.name}
                    //incrementCounter={this.handleIncrement}
                    />
                  ))
                }
              </tbody>
            </table>
          </Col>

          <Col
            desktop={6}
            mobile={12}
            className={styles.preparations}
          >
            <div className={styles.headerWrapper}>
              {preparations.length > 0 && (
                <h5 className={styles.subHeading}>
                  <FormattedMessage {...messages.instructionHeading} />
                </h5>
              )}
            </div>
            <ul className={styles.preparationsList}>
              {preparations.map((step, i) => (
                <li className={styles.preparationsItem} key={i}>
                  {
                    locale === 'vi'
                      ? (step.text_vn || step.text)
                      : step.text
                  }
                </li>
              ))}
            </ul>

            <div className={styles.socialComments}>
              <div
                className="fb-comments"
                data-numposts="5"
                data-width="100%"
              ></div>
            </div>
          </Col>
        </Row>

      </Container>
    </div>

    );
  }
}

export default RecipeDetails;




  if (thisistest == -1 && productId && !cart.has(productId))

      productsToAdd.push({ productId, quantity })	




http://10.93.98.178:5200/

		
