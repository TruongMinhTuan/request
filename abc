
/**
*
* RecipeDetails
*
*/

import React from 'react';
import Helmet from 'react-helmet';
import classnames from 'classnames/bind';
import { FormattedMessage } from 'react-intl';
import { IconCartHappy } from 'components/Icons';
import TagOos from 'components/TagOos';
import {
  DebugHelper,
  Container,
  Row,
  Col,
  CoverPhoto,
  Input,
  Button,
} from 'components/Basement';
import EntityAuthor from 'components/EntityAuthor';
import EntityDescription from 'components/EntityDescription';
import Permalink from 'components/Permalink';
import Fblike from 'components/Fblike';
import {
  isProductAvailable,
} from 'app/utils';
import messages from './messages';
import styles from './styles.styl';

const cx = classnames.bind(styles);
const debug = new DebugHelper('components/RecipeDetails');

const Ingredient = (props) => {
  function toggleCheckbox (productId, quantity) {
    console.log("0");
    if (productId) {
      let indexOfProduct = -1;
      productsToAdd.forEach((product, index) => {
        if (product.productId === productId) {
          indexOfProduct = index;
        }
      });
      if (indexOfProduct === -1) {
        console.log("2"+productsToAdd.length);
        productsToAdd.push({ productId, quantity });
      } else {
        console.log("3" + productsToAdd.length);
        productsToAdd.splice(indexOfProduct, 1);
      }
    }
    thisistest();
  }

  const { ingredient, locale, productsToAdd, cart, thisistest } = props;
  const {
    displayQuantity,
    text,
    text_vn: textVn,
    product = {},
    quantity,
  } = ingredient;

  const {
    id: productId,
    name: productName,
    availableQuantity, 
    published,
  } = product;
  const isAvailable = isProductAvailable(availableQuantity);
  const outOfStock = !isAvailable || !published;
  const ingredientName = locale === 'vi'
    ? (textVn || text)
    : text;
  const thumbnail = product['thumbnail@2x'];
  const thumbnailUrl = thumbnail && thumbnail[0] && thumbnail[0].url;
  const isAdded = productsToAdd.map(products => products.productId).includes(productId);
  return (
    <tr className={styles.ingredientsItem}>
      <td>
        { productId && cart.has(productId) &&
          <span className={styles.ingredientStatus}>
            <IconCartHappy height={20} width={20} />
          </span>
        }
        { productId && !cart.has(productId) && !outOfStock &&
          <Input
            name={productId}
            type="checkbox"
            defaultChecked={isAdded}
            className="inline"
            onChange={() => toggleCheckbox(productId, quantity)}
          />
        }
      </td>
      <td className={styles.ingredientQuantity}>
        {displayQuantity || '+'}
      </td>
      <td
        className={styles.ingredientName}
        colSpan={!productId ? '2' : '1'}
      >
        { ingredientName }
        <br />
        {productId && outOfStock &&
        <TagOos className={styles.outOfStockTag} />
        }
      </td>
      {productId && (
        <td>
          <Permalink
            deeplink={`product::${productId}`}
            name={name}
            className={styles.ingredientProduct}
          >
            { thumbnailUrl &&
              <CoverPhoto
                height={146}
                src={thumbnailUrl}
                alt={productName}
                ratio="3_2"
              />
            }
          </Permalink>
        </td>
      )}
    </tr>
  );
};


class RecipeDetails extends React.Component {
  constructor (props) {
    super(props);
    this.remove = this.remove.bind(this);
    this.state = {
      data: 0,
      temp: -1,
    };
    
  }
  componentWillMount() {
    //Thực hiện một số tác vụ, hàm này chỉ thực hiện 1 lần duy nhất
    const {
      name,
      description = '',
      images,
      author,
      ingredients,
      preparations,
      locale,
      // serve,
      addProductsToCart,
      productsToAdd,
      cart,
    } = this.props;
    function isOutOfStock (availableQuantity, published) {
      return !isProductAvailable(availableQuantity) || !published;
    }
    if (1===1) {
      ingredients.forEach((ingredient) => {
        if (!cart.has(ingredient.product.id) && ingredient.product && !isOutOfStock(ingredient.product.availableQuantity, ingredient.product.published)) {
          productsToAdd.push({
            productId: ingredient.product.id,
            quantity: ingredient.quantity,
          });
        }
      });
    }
    console.log("so san pham : "+productsToAdd.length)
  }
  remove () {
    const {
      productsToAdd,
    } = this.props;
    this.setState({ temp: productsToAdd.length });
  }
  render () {
    debug('render');
    const classes = cx({
      recipeDetails: true,
    });
    const {
    name,
    description = '',
    images,
    author,
    ingredients,
    preparations,
    locale,
    // serve,
    addProductsToCart,
    productsToAdd,
    cart,
  } = this.props;

    const photoUrl = images && images[0] && images[0].url;
    console.log(this.state.temp);
    debug('ingredientName', ingredients);

    const metaTitle = `${name}`;
    let metaKeywords = ingredients
      .map(ingredient => `${ingredient.text},${ingredient.text_vn}`);

    metaKeywords.push('công thức nấu ăn');
    metaKeywords.push('cooking');
    metaKeywords.push('recipe');
    metaKeywords = metaKeywords.join(',');

    const metaDescription = `Công Thức Nấu Ăn (Recipe): ${name} (${author}) - ${description}`;
    let isAddToCart = false;
    //console.log('this is test:'+isAddToCart);
    ingredients.forEach((ingredient) => {
      if (ingredient.product && cart.has(ingredient.product.id)) {
        isAddToCart = true;
      }
    });

    function isOutOfStock (availableQuantity, published) {
      return !isProductAvailable(availableQuantity) || !published;
    }

    // if (!isAddToCart) {
    //   ingredients.forEach((ingredient) => {
    //     if (ingredient.product && !isOutOfStock(ingredient.product.availableQuantity, ingredient.product.published)) {
    //       productsToAdd.push({
    //         productId: ingredient.product.id,
    //         quantity: ingredient.quantity,
    //       });
    //     }
    //   });
    // }
    
    function isDisableButton () {
      const availableProduct = [];
      ingredients.forEach((ingredient) => {
        if (ingredient.product && !isOutOfStock(ingredient.product.availableQuantity, ingredient.product.published)) {
          availableProduct.push({
            productId: ingredient.product.id,
          });
        }
      });
      return availableProduct.map(Product => cart.has(Product.productId)).includes(false);
    }
    return (
      <div className={classes}>

        <Helmet title={metaTitle}>
          <meta name="description" content={metaDescription} />
          <meta name="keywords" content={metaKeywords} />
          <meta name="og:title" content={`chopp.vn | ${metaTitle}`} />
          <meta name="og:description" content={metaDescription} />
          { photoUrl &&
            <meta name="og:image" content={photoUrl} />
          }
        </Helmet>

        <Container centered>
          <Row>
            <Col desktop={12}>
              <h4 className={styles.heading}>{name}</h4>
            </Col>
          </Row>

          <Row className={styles.socialActions}>
            <Col desktop={12}>
              <Fblike />
            </Col>
          </Row>

          <Row className={styles.introduction}>
            <Col
              desktop={4}
              tablet={6}
              mobile={12}
              className={styles.preface}
            >
              {
                author && <EntityAuthor text={`—${author}`} />
              }
              {
                description && (
                  <EntityDescription>
                    <br />
                    {description}
                  </EntityDescription>
                )
              }
            </Col>

            { photoUrl && (
              <Col
                desktop={6}
                tablet={6}
                mobile={12}
              >
                <CoverPhoto
                  src={photoUrl}
                  alt={name}
                  className={styles.photo}
                  ratio="3_2"
                />
              </Col>
            )}
          </Row>

          <Row className={styles.details}>
            <Col
              desktop={4}
              tablet={6}
              mobile={12}
              className={styles.ingredients}
            >
              { ingredients.length && (
                <div className={styles.headerWrapper}>
                  <h5 className={styles.subHeading}>
                    <FormattedMessage {...messages.ingredientHeading} />
                  </h5>
                  <Button
                    cast="success"
                    className={styles.addAllToCartButton}
                    size="small"
                    disabled={this.state.temp === 0 ?true :false  || !isDisableButton() }
                    onClick={() => { addProductsToCart(productsToAdd); productsToAdd.length = 0; }}
                  >
                    <FormattedMessage {...messages.addToCart} />
                  </Button>
                </div>
              )}
              <table className={styles.ingredientsList}>
                <tbody>
                  { ingredients
                      .map((ingredient, i) => (
                        <Ingredient
                          ingredient={ingredient}
                          key={i}
                          locale={locale}
                          productsToAdd={productsToAdd}
                          cart={cart}
                          thisistest={this.remove}
                          // {this.setNewNumber}
                        />
                      )
                    )
                  }
                </tbody>
              </table>
            </Col>

            <Col
              desktop={8}
              tablet={6}
              mobile={12}
              className={styles.preparations}
            >
              <div className={styles.headerWrapper}>
                { preparations.length > 0 && (
                  <h5 className={styles.subHeading}>
                    <FormattedMessage {...messages.instructionHeading} />
                  </h5>
                )}
              </div>
              <ul className={styles.preparationsList}>
                { preparations.map((step, i) => (
                  <li className={styles.preparationsItem} key={i}>
                    {
                      locale === 'vi'
                        ? (step.text_vn || step.text)
                        : step.text
                    }
                  </li>
                ))}
              </ul>

              <div className={styles.socialComments}>
                <div
                  className="fb-comments"
                  data-numposts="5"
                  data-width="100%"
                ></div>
              </div>
            </Col>
          </Row>

        </Container>
      </div>
    );
  }
}
export default RecipeDetails;
