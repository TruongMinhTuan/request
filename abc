

/**
 * AirTableController
 *
 * @description :: Server-side logic for managing Airtables
 * @help        :: See http://links.sailsjs.org/docs/controllers
 * hello
 */
const extend = require('extend');
const bluebird = require('bluebird');
const setting = require('config/mobile-settings');
const AirTableModel = require('api/models/AirTable.js');
const utils = require('modules/utils');
const DebugHelper = require('modules/debug').DebugHelper;
const sm = require('sitemap');

let config = utils.getConfig();
const debug = new DebugHelper('AirTableController');
const AirTableConfig = sails.config.airtable;

const trendingSearch = extend(true, {}, require('modules/trendingSearch'));
trendingSearch.initialize();

let hostNameConfig;
const env = process.env.NODE_ENV || 'development';
if (env === 'development') {
  hostNameConfig = config.hostName;
} else if (env === 'staging') {
  hostNameConfig = config.hostName;
} else if (env === 'production') {
  hostNameConfig = config.hostName;
}

function listCompanies(req) {
  const userId = getParam(req, 'userId', null);
  const languageCode = getParam(req, 'locale', 'en');
  const limit = getParam(req, 'limit', null);
  const offset = getParam(req, 'offset', null);
  return new Promise((resolve) => {
    return AirTableModel.listCompanies(limit, offset, (err, result, newOffset) => {
      if (err) {
        debug('error in listCompanies', err);
        return resolve(null);
      }
      let companyConfig = sails.config[`companyPriority_${languageCode}`] || [];
      for (let i = 0; i < result.length; i++) {
        for (let j = 0; j < companyConfig.length; j++) {
          if (result[i].id === companyConfig[j].id) {
            result[i].fields.priority = companyConfig[j].priority;
          }
        }
        result[i].i = i;
      }
      result = addCompanyLocalePriority(result, companyConfig, getCompanyId);
      let returnResult = null;
      if (!userId) {
        result = result.sort(companyCompare);
        returnResult = utils.getAirtableItemDetail(AirTableConfig.companyFields, languageCode, result);
        returnResult = setPriority(returnResult);
        return resolve({
          'result': returnResult,
          'offset': newOffset
        });
      }
      // sort company by store
      return applyAutoRecommendation(result, getCompanyId, userId, 'company')
        .then((list) => {
          list = list.sort(companyCompare);
          returnResult = utils.getAirtableItemDetail(AirTableConfig.companyFields, languageCode, list);
          returnResult = setPriority(returnResult);
          return resolve({
            'result': returnResult,
            'offset': newOffset
          });
        });
    });
  });
}

function getPardam(req, paramName, defaultValue) {
  const rs = req.param(paramName, null);
  if (rs) {
    return rs;
  }
  return defaultValue;
}

function applyAutoRecommendation(list, getObjId, userId, type) {
  return new Promise((resolve) => {
    userId = null;
    if (userId) {
      let options = {
        timeout: 20000,
        url: '',
        json: true
      };
      if (type) {
        options.url = `${sails.config.recommender.url}/recommend/${userId}/${type}`;
      } else {
        options.url = `${sails.config.recommender.url}/recommend/${userId}`;
      }

      debug('waiting auto recommend');
      return request.get(options, (err, response, body) => {
        if (err || response.statusCode !== 200 || !body) {
          debug('applyAutoRecommendation', body);
          return resolve(list);
        }
        let recommendedList = null;
        if (type === 'company') {
          recommendedList = body.companies;
        } else if (type === 'category') {
          recommendedList = body.categories;
        } else if (type === 'product') {
          recommendedList = body.products;
        } else {
          return resolve(list);
        }
        return resolve(addRecommendationScore(list, recommendedList, getObjId));
      });
    }
    return resolve(list);
  });
}

function setPriority(list) {
  // make first 3 items of the list displayed larger
  let length = Math.min(setting.prioritizedItems, list.length);
  for (let i = 0; i < length; i++) {
    if (!list[i].fields) {
      list[i].priority = 1;
    } else if (list[i].fields && !list[i].fields.priority) {
      list[i].fields.priority = 1;
    }
  }
  return list;
}

function companyCompare(a, b) {
  if (!a.fields.priority && b.fields.priority) return 1;
  if (a.fields.priority && !b.fields.priority) return -1;

  if (!a.fields.live && b.fields.live) return 1;
  if (a.fields.live && !b.fields.live) return -1;

  if (a.i < b.i) return -1;
  if (a.i > b.i) return 1;

  if (!a.localePriority && b.localePriority) return 1;
  if (a.localePriority && !b.localePriority) return -1;

  if (a.localePriority && b.localePriority) {
    if (a.localePriority > b.localePriority) return 1;
    if (a.localePriority < b.localePriority) return -1;
  }

  if (a.recommendedScore && b.recommendedScore) {
    if (a.recommendedScore < b.recommendedScore) return 1;
    else if (a.recommendedScore > b.recommendedScore) return -1;
  }

  return 0;
}

function getCompanyId(company) {
  return company.id;
}

function listCompanies(req) {
  const userId = getParam(req, 'userId', null);
  const languageCode = getParam(req, 'locale', 'en');
  const limit = getParam(req, 'limit', null);
  const offset = getParam(req, 'offset', null);
  return new Promise((resolve) => {
    return AirTableModel.listCompanies(limit, offset, (err, result, newOffset) => {
      if (err) {
        debug('error in listCompanies', err);
        return resolve(null);
      }
      let companyConfig = sails.config[`companyPriority_${languageCode}`] || [];
      for (let i = 0; i < result.length; i++) {
        for (let j = 0; j < companyConfig.length; j++) {
          if (result[i].id === companyConfig[j].id) {
            result[i].fields.priority = companyConfig[j].priority;
          }
        }
        result[i].i = i;
      }
      result = addCompanyLocalePriority(result, companyConfig, getCompanyId);
      let returnResult = null;
      if (!userId) {
        result = result.sort(companyCompare);
        returnResult = utils.getAirtableItemDetail(AirTableConfig.companyFields, languageCode, result);
        returnResult = setPriority(returnResult);
        return resolve({
          'result': returnResult,
          'offset': newOffset
        });
      }
      // sort company by store
      return applyAutoRecommendation(result, getCompanyId, userId, 'company')
        .then((list) => {
          list = list.sort(companyCompare);
          returnResult = utils.getAirtableItemDetail(AirTableConfig.companyFields, languageCode, list);
          returnResult = setPriority(returnResult);
          return resolve({
            'result': returnResult,
            'offset': newOffset
          });
        });
    });
  });
}

function addCompanyLocalePriority(list, companyLocale, getObjId) {
  let rs = [];
  list.forEach((item) => {
    let id = getObjId(item);
    if (id) {
      companyLocale.forEach((company, i) => {
        if (id === company.id) {
          item.localePriority = i + 1;
        }
      });
    }
    rs.push(item);
  });
  return rs;
}

function listCategories(req) {
  const userId = getParam(req, 'userId', null);
  const languageCode = getParam(req, 'locale', 'en');
  const limit = getParam(req, 'limit', null);
  const offset = getParam(req, 'offset', null);
  return new Promise((resolve) => {
    return AirTableModel.listCategories(limit, offset, (err, result, newOffset) => {
      if (err) {
        debug('error in listCategories', err);
        return resolve(null);
      }
      result = addCategoryLocalePriority(result, sails.config[`categoryPriority_${languageCode}`] || [], getCategoryId);
      let returnResult = null;
      if (!userId) {
        result = result.sort(categoryCompare);
        returnResult = utils.getAirtableItemDetail(AirTableConfig.categoryFields, languageCode, result);
        returnResult = setPriority(returnResult);
        return resolve({
          'result': returnResult,
          'offset': newOffset
        });
      }
      return applyAutoRecommendation(result, getCategoryId, userId, 'category')
        .then((list) => {
          list = list.sort(categoryCompare);
          returnResult = utils.getAirtableItemDetail(AirTableConfig.categoryFields, languageCode, list);
          returnResult = setPriority(returnResult);
          return resolve({
            result: returnResult,
            offset: newOffset
          });
        });
    });
  });
}

function addCategoryLocalePriority(list, categoryLocale, getObjId) {
  let rs = [];
  list.forEach((item) => {
    let id = getObjId(item);
    if (id) {
      categoryLocale.forEach((category, i) => {
        if (id === category.id) {
          item.localePriority = i + 1;
        }
      });
    }
    rs.push(item);
  });
  return rs;
}

function getCategoryId(category) {
  return category.id;
}

function categoryCompare(a, b) {
  if (!a.fields.priority && b.fields.priority) return 1;
  if (a.fields.priority && !b.fields.priority) return -1;

  if (!a.localePriority && b.localePriority) return 1;
  if (a.localePriority && !b.localePriority) return -1;

  if (a.localePriority && b.localePriority) {
    if (a.localePriority > b.localePriority) return 1;
    if (a.localePriority < b.localePriority) return -1;
  }

  if (a.recommendedScore < b.recommendedScore) return 1;
  else if (a.recommendedScore === b.recommendedScore) return 0;
  return -1;
}

module.exports = {
  getStoresXml(req, res) {
    new Promise((resolve) => {
      listCompanies(req)
        .then((rs) => {
          if (rs) {
            let sitemap = sm.createSitemap({
              hostname: `${hostNameConfig}/categories`,
              cacheTime: 600000,
            });
            rs.result.forEach((value) => {
              if (value.fields.published) {
                sitemap.add({ url: `${value.fields.alias}`, changefreq: 'weekly', lastmodISO: new Date().toISOString(), priority: 0.7, });
              }
            });
            res.header('Content-Type', 'application/xml');
            return res.ok(sitemap.toString());
          }
          return res.serverError();
        });
    });
  },

  getCategoriesXml(req, res) {
    new Promise((resolve) => {
      listCategories(req)
        .then((rs) => {
          if (rs) {
            let sitemap = sm.createSitemap({
              hostname: `${hostNameConfig}/categories`,
              cacheTime: 600000,
            });
            rs.result.forEach((value) => {
              if (value.fields.published) {
                sitemap.add({ url: `${value.fields.alias}`, changefreq: 'weekly', lastmodISO: new Date().toISOString(), priority: 0.7, });
              }
            });
            res.header('Content-Type', 'application/xml');
            return res.ok(sitemap.toString());
          }
          return res.serverError();
        });
    });
  },

  getSiteMapXml(req, res) {
    let sitemap = sm.buildSitemapIndex({
      urls:
        [`${hostNameConfig}/sitemap.xml`,
        `${hostNameConfig}/sitemap/categories.xml`,
        `${hostNameConfig}/sitemap/stores.xml`,
        ],
    });
    res.header('Content-Type', 'application/xml');
    return res.ok(sitemap.toString());
  }
}
